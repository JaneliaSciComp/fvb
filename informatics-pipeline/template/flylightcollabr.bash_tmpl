#!/bin/bash
# ****************************************************************************
# Resource name:  chacrm.bash_tmpl
# Written by:     Rob Svirskas
# Revision level: 1.0
# Date released:  2008-01-02
# Description:    After processing, this shell script template implements the
#                 image processing flow for the Rubin Lab's ChaCRM images.
#                 If needed, SecData and organizedData directory structures
#                 are created. ImageJ is used to create work products, and
#                 links from organizedData to SecData are created.
# Required resources:
#   Programs:     ImageJ
#                 clustermakemov
# Parameters:     $1: ImageJ macro path
# ****************************************************************************

# Required resources
IMAGEJ="/usr/local/java/jre/bin/java -mx8000m -XX:+AggressiveHeap -jar /usr/local/ImageJ/ij.jar -ijpath /usr/local/ImageJ -batch "
GETCHAN="/misc/local/pipeline/bin/getchan"
QPOPULATE="/misc/local/pipeline/bin/qscore_populate -v"
SAGE_QPOPULATE="/misc/local/pipeline/bin/sage_qscore_populate -v"

# Parameters
if [ ! $1 ]
then
  echo "Error: no ImageJ macro specified"
  exit -1
fi
IMAGEJ_MACRO=$1

# Make sure the .lsm file exists
if [ -e $grammar{lsm_dir}/$grammar{lsm_file} ]
then
#  chmod 555 $grammar{lsm_dir}/$grammar{lsm_file}
  echo "File exists"
else
  echo -e "Error: image $grammar{lsm_dir}/$grammar{lsm_file} does not exist"
  exit -1
fi

# Make sure the ImageJ macro exists
if [ ! -e $IMAGEJ_MACRO ]
then
  echo -e "Error: ImageJ macro $IMAGEJ_MACRO does not exist"
  exit -1
fi

# Create work product directories as needed
echo "Creating work product directories"
for THISDIR in $grammar{secdata_dirs}
do
  if [ ! -e $THISDIR ]
  then
    mkdir -p -m 755 $THISDIR
    if [ ! -e $THISDIR ]
    then
      echo -e "Could not create $THISDIR"
      exit -1
    fi
  fi
done


# Set up X frame  buffer
#/usr/bin/Xvfb :$grammar{random_num} -screen 0 1x1x24 -sp /usr/lib64/xserver/SecurityPolicy -fp /usr/share/X11/fonts/misc &
#MYPID=$!
#export DISPLAY="localhost:$grammar{random_num}.0"

# Run the ImageJ macro to create tiff
xvfb-run $IMAGEJ $IMAGEJ_MACRO
if [ $? -ne 0 ]
then
  echo -e "Error: ImageJ macro $IMAGEJ_MACRO failed"
  exit -1
fi

# We're done with the frame buffer
#kill -9 $MYPID

# Determine reference channel and resolution
Rv=`$GETCHAN $grammar{lsm_dir}/$grammar{lsm_file}`
# Anything other than a 0 in $? is bad...
if [ $? -ne 0 ]
then
  echo "Could not determine reference channel";
  exit;
else
  Channel=`echo $Rv | cut -d' ' -f1`;
  Xscale=`echo $Rv | cut -d' ' -f2`;
  Yscale=`echo $Rv | cut -d' ' -f3`;
  Zscale=`echo $Rv | cut -d' ' -f4`;
fi

if [ "$grammar{reverse_zstack}" -eq 1 ]
then
  echo "Reverse Z";
  ALIGNIMG="$grammar{tiff_dir}/$grammar{tiff_file}";
  Channel=0;
else
  echo "Not Reversing";
  ALIGNIMG="$grammar{lsm_dir}/$grammar{lsm_file}";
fi

echo "Aligning $ALIGNIMG using Channel $Channel";

# Registration
if [ "$grammar{area}" == "b" ]
then
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/groups/peng/home/brainaligner/lib

  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.tmp_GF.raw"
  echo "START jba (1)"
  echo "IMG INFO $Channel $Xscale $Zscale $Yscale"
  /groups/peng/home/brainaligner/program/brainaligner \
   -s "$ALIGNIMG" \
   -c $Channel \
   -t "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan.tif" \
   -L "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan.marker" \
   -C 0 \
   -o "$grammar{registration_dir}/$grammar{short_file}.tmp_GF.raw" \
   -w 0 \
   -X 1.0000 \
   -Z 1.0000 \
   -x $Xscale \
   -z $Zscale \
   -B 1024 \
   -e  1.00 \
   -R
  if [ ! -e "$grammar{registration_dir}/$grammar{short_file}.tmp_GF.raw" ]
  then
    echo -e "Error: jba (1) failed"
    exit -1
  fi
  echo "COMPLETED jba"

  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.tmp.lobeseg.raw"
  echo "START lobe_seger"
  /groups/peng/home/brainaligner/program/lobe_seger \
   -i "$grammar{registration_dir}/$grammar{short_file}.tmp_GF.raw" \
   -c $Channel \
   -o "$grammar{registration_dir}/$grammar{short_file}.tmp.lobeseg.raw"

  if [ ! -e "$grammar{registration_dir}/$grammar{short_file}.tmp.lobeseg.raw" ]
  then
    echo -e "Error: lobe_seger failed"
    exit -1
  fi
  echo "COMPLETED lobe_seger"

  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.tmp_GF_local.raw"
  echo "START jba (2)"
  /groups/peng/home/brainaligner/program/brainaligner \
   -s "$grammar{registration_dir}/$grammar{short_file}.tmp.lobeseg.raw" \
   -c $Channel \
   -t "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan_lobeseg.tif" \
   -L "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan.marker" \
   -C 0 \
   -o "$grammar{registration_dir}/$grammar{short_file}.tmp_GF_local.raw" \
   -w 0 \
   -X 1.0000 \
   -Z 1.0000 \
   -x 1.0000 \
   -z 1.0000 \
   -B 1024 \
   -e  1.00
  if [ ! -e "$grammar{registration_dir}/$grammar{short_file}.tmp_GF_local.raw" ]
  then
    echo -e "Error: jba (2) failed"
    exit -1
  fi
  echo "COMPLETED jba"

  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.loop1.raw"
  echo "START jba (3)"
  /groups/peng/home/brainaligner/program/brainaligner \
   -s "$grammar{registration_dir}/$grammar{short_file}.tmp_GF_local.raw" \
   -c $Channel \
   -t "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan_lobeseg.tif" \
   -L "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan.marker" \
   -C 0 \
   -o "$grammar{registration_dir}/$grammar{short_file}.loop1.raw" \
   -w 10 \
   -X 1.0000 \
   -Z 1.0000 \
   -x 1.0000 \
   -z 1.0000 \
   -B 1024 \
   -e  1.00 \
   -j 1 \
   -J "$grammar{registration_dir}/$grammar{short_file}.loop1.v3draw.vc.raw" \
   -H 2
  if [ ! -e "$grammar{registration_dir}/$grammar{short_file}.loop1.raw" ]
  then
    echo -e "Error: jba (3) failed"
    exit -1
  fi
  echo "COMPLETED jba"

  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.loop2.raw"
  echo "START jba (4)"
  /groups/peng/home/brainaligner/program/brainaligner \
   -s "$grammar{registration_dir}/$grammar{short_file}.loop1.raw" \
   -c $Channel \
   -t "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan_lobeseg.tif" \
   -L "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan.marker" \
   -C 0 \
   -o "$grammar{registration_dir}/$grammar{short_file}.loop2.raw" \
   -w 10 \
   -X 1.0000 \
   -Z 1.0000 \
   -x 1.0000 \
   -z 1.0000 \
   -B 1024 \
   -e  1.00 \
   -j 1 \
   -J "$grammar{registration_dir}/$grammar{short_file}.loop2.v3draw.vc.raw" \
   -H 2
  if [ ! -e "$grammar{registration_dir}/$grammar{short_file}.loop2.raw" ]
  then
    echo -e "Error: jba (4) failed"
    exit -1
  fi
  echo "COMPLETED jba"

  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.reg.local.raw"
  echo "START jba (5)"

  /groups/peng/home/brainaligner/program/brainaligner \
   -T \
   -s "$grammar{registration_dir}/$grammar{short_file}.loop2.raw" \
   -t "/groups/scicomp/targetbrainimages/JFRCtemplate2010.Hanchuan/GMR_36G04_AE_01_05-hanchuan_rot180_recentered_3chan_mask_edgesinglecolor_center_16bit.raw" \
   -o "$grammar{registration_dir}/$grammar{short_file}.reg.local.raw" \
   -A 0 \
   -a 2

  if [ ! -e "$grammar{registration_dir}/$grammar{short_file}.reg.local.raw" ]
  then
    echo -e "Error: jba (5) failed"
    exit -1
  fi
  echo "COMPLETED jba"

  # Remove transient files
  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.tmp_GF.raw"
  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.tmp_GF_local.raw"
  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.loop1.raw"
  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.loop1.v3draw.vc.raw"
  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.loop2.v3draw.vc.raw"
  /bin/rm -f "$grammar{registration_dir}/$grammar{short_file}.tmp.lobeseg.raw"

# Remove transient files
  /bin/rm -f $grammar{tiff_dir}/$grammar{tiff_file}

  echo "COMPLETED registration"

  echo "Loading Q scores into Nighthawk"
  if [ -e "$grammar{registration_dir}/$grammar{registered_quality}" ]
  then
    echo "$grammar{registration_dir}/$grammar{registered_quality}" | $SAGE_QPOPULATE
  fi
  echo "Loaded Q scores into SAGE"

# Create links


else
  echo "Skipping tissue $grammar{area}"
fi

# We're done! Delete the ImageJ macro and this shell script.
cd /groups/flyprojects/home/flylight/RUBINLAB2/REGISTRATION/
rm -f $IMAGEJ_MACRO
trap "rm -f $0" 0
echo "Job complete for $grammar{short_file}"
