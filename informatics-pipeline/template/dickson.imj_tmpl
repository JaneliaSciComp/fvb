// ***************************************************************************
// Resource name:  dickson.imj_tmpl
// Written by:     Rob Svirskas
// Revision level: 1.0
// Date released:  2013-05-01
// Description:    After processing, this ImageJ macro template template
//                 implements the image processing flow for the Dickson Lab's
//                 images. ImageJ is used to create stack projections,
//                 a Z stack translation, and a 180 degree single-axis
//                 rotation.
// Parameters:     NONE
// ***************************************************************************

// $grammar{lsm_file}
requires("1.38x");

var base='$grammar{lsm_file} Channel : ';

// Channels are being assigned in the grammar (chacrm.gra) using bin/list_img_channels

var minSum=0;
var maxSum=0;
var minCount=0;
var maxCount=0;
var useBioFormats=0;

print("Sequence start for $grammar{lsm_file}");
saveSettings();
LOAD_STACK();
getVoxelSize(Vwidth, Vheight, Vdepth, Vunit);
if ($grammar{reverse_zstack} == 1) {
	REVERSE_STACKS();
}

MERGE_IMAGES();
setVoxelSize(Vwidth, Vheight, Vdepth, Vunit);
saveAs("Tiff","$grammar{tiff_dir}/$grammar{tiff_file}");
//CREATE_TRANSLATION();
//CREATE_ROTATION();
CREATE_PROJECTIONS();
TERMINATE_MACRO();

function LOAD_STACK() {
  print("Opening $grammar{lsm_dir}/$grammar{lsm_file} with LSM Reader");
  run("LSM Reader","open=$grammar{lsm_dir}/$grammar{lsm_file}");
  if (nImages() == 0) {
    print("Opening $grammar{lsm_dir}/$grammar{lsm_file} with "
          + "Bio-Formats Importer");
    run("Bio-Formats Importer","open=$grammar{lsm_dir}/$grammar{lsm_file} "
        + "view=[Standard ImageJ] stack=Default split_channels");
    // The base changes for files opened with the Bio-Formats Importer!
    base='$grammar{lsm_file} - ';
    useBioFormats = 1;
    if (nImages() == 0) {
      exit("Could not open with Bio-Formats Importer");
    }
  }
  print("Image opened");
}

function FLIP_REVERSE_STACKS() {
  //To properly flip the image you will not only need to flip horizontally but also reverse the Z stack
  ImgCount = 1;
  while (nImages()>=ImgCount) {
    selectImage(nImages());
    print("Flipping image" + ImgCount);
    run("Flip Horizontally","stack");
    print("Reverse stack for image" + ImgCount);
    run("Stack Reverser");
    ImgCount++;
  }
}

function FLIP_IMAGES_H() {
  //To properly flip the image you will not only need to flip horizontally but also reverse the Z stack
  ImgCount=1;
  while (nImages()>=ImgCount) {
    print("Flipping image " + ImgCount);
    selectImage(ImgCount);
    run("Flip Horizontally","stack");
    ImgCount++;
  }
}

function REVERSE_STACKS() {
  //To properly flip the image you will not only need to flip horizontally but also reverse the Z stack
  ImgCount=1;
  while (nImages()>=ImgCount) {
    selectImage(ImgCount);
    print("Reversing stack for image " + ImgCount);
    run("Stack Reverser");
    ImgCount++;
  }
}

function MERGE_IMAGES() {
  print("Merging " + nImages() + " images");
  if ((nImages() == 2) || (nImages() == 3))  {
    Found=0;

    if ($grammar{detect_chan} == 1) {
        print("Found matching channel layout");
        if (useBioFormats == 1) {
         RED = base + 'C=1';
         GREEN = base + 'C=0';
         BLUE = base + 'C=1';        
        } else {
         RED = base + '$grammar{lsm_red_chan}';
         GREEN = base + '$grammar{lsm_green_chan}';
         BLUE = base + '$grammar{lsm_blue_chan}';
        }	
        print("Red:" + RED + " Green:" + GREEN + " Blue:" + BLUE);        
        if (nImages() == 3) {
          rgb = newArray(""+RED,""+GREEN,""+BLUE);
	  color=newArray("red", "green", "blue");
        }
        else {
          rgb = newArray(""+RED,""+GREEN);
	  color=newArray("red", "green");
        }
        CREATE_REFERENCE();
        print("Number of channels to recalibrate: "+rgb.length);
        for (ch=0; ch < rgb.length; ch++) {
          print("Recalibrating "+rgb[ch]);
          selectWindow(rgb[ch]);
          RECALIBRATE(color[ch]);
          selectWindow("Results");
          run("Clear Results");
        }
        run("RGB Merge...","red=[" + RED + "] " + "green=[" + GREEN
            + "] blue=[" + BLUE + "]");
        Found=1;
    }

    if (Found == 0) {
      exit("Could not match title " + getTitle());
    }
  } else {
    print("Title: "+getTitle());
    exit("Image must be 2- or 3-channel (found " + nImages() + ")");
  }
  rename("$grammar{short_file}");
  print("Image merge complete");
}

function CREATE_REFERENCE() {
  print("Generating reference projection");
  selectWindow(RED);
  run("Z Project...","projection=[Sum Slices]");
  saveAs("Jpeg","$grammar{reference_dir}/$grammar{projection_reference_sum}");
  close();
  print("  Reference projection complete");
}

function RECALIBRATE(col) {
  // Temporary directory
  dir="/tmp/";
  // setBatchMode(true);
  title=getTitle();
  sum=0;
  setSlice(1);
  currentSlice=0;
  while(currentSlice<nSlices) {
    //==========================================================================
    // isolate each slide from the stack, measure it, convert it to 16bit and
    // store it preliminarily
    currentSlice=getSliceNumber;
    run("Duplicate...", "title="+currentSlice);
    getStatistics(area, mean, min, max, std);
    row=nResults;
    setResult("premean", row, mean);
    setResult("premin", row, min);
    setResult("premax", row, max);
    setResult("prestd", row, std);
    if (bitDepth == 8) {
      run("16-bit");
      run("Multiply...", "value=16");
    }
    //==========================================================================
    // measure grey values at five positions in the image: four corners
    // (assumption: these are outside the specimen -> background) and one in
    // the center (assumption: this is in the specimen).
    getDimensions(width, height, channels, slices, rois);
    dist=10;
    roi=width/10;
    w=0;
    // setTool(0);
    // left upper corner
    field="left upper corner";
    makeRectangle(dist, dist, roi, roi);
    wait(w);
    getStatistics(area1, mean1, min1, max1, std1, histogram1);
    // right upper corner
    field="right upper corner";
    makeRectangle(width-(roi+dist), dist, roi, roi);
    wait(w);
    getStatistics(area2, mean2, min2, max2, std2, histogram2);
    // left lower corner
    field="left lower corner";
    makeRectangle(dist, height-(roi+dist), roi, roi);
    wait(w);
    getStatistics(area3, mean3, min3, max3, std3, histogram3);
    // right lower corner
    field="right lower corner";
    makeRectangle(width-(roi+dist), height-(roi+dist), roi, roi);
    wait(w);
    getStatistics(area4, mean4, min4, max4, std4, histogram4);
    // ROIs for the measurement in the center of the slice is 9 times bigger,
    // than the corner ROIs to cover most of the central brain.
    // By this I avoid some of the peripheral oversaturation in unevenly
    // stained brains.
    field="outer center";
    makeRectangle(width/2-(roi*3)/2, height/2-(roi*3)/2, roi*3, roi*3);
    wait(w);
    getStatistics(area5, mean5, min5, max5, std5, histogram5);
    field="inner center";
    makeRectangle(width/2-roi/2, height/2-roi/2, roi, roi);
    wait(w);
    getStatistics(area6, mean6, min6, max6, std6, histogram6);
    field="medial center";
    makeRectangle(width/2-(roi*2)/2, height/2-(roi*2)/2, roi*2, roi*2);
    wait(w);
    getStatistics(area7, mean7, min7, max7, std7, histogram7);
    //==========================================================================
    field="mean center";
    multiplier=0.025;
    divider=1+(2*multiplier);
    meanC=(mean5+(mean6*multiplier)/divider);
    minC=(min5+(min6*multiplier)+(min7*multiplier)/divider);
    maxC=(max5+(max6*multiplier)+(max7*multiplier)/divider);
    stdC=(std5+(std6*multiplier)+(std7*multiplier)/divider);
    //==========================================================================
    // define minimal (MIN) and maximal (MAX) value for current slide and write
    // them to the "Results" table.
    //==========================================================================
    // define MIN
    counter=0;
    sum=0;
    sum2=0;
    sum3=0;
    // define measure for the decision if measurement is outside or inside of
    // the specimen.
    insideTest=maxC-2*stdC;
    // test if corner ROIs are outside of the specimen. if not discard this
    // measure from "corner-means".
    if (max1<insideTest) {
      sum=sum+min1;
      sum2=sum2+std1;
      sum3=sum3+max1;
      counter=counter+1;
    }
    if (max2<insideTest) {
      sum=sum+min2;
      sum2=sum2+std2;
      sum3=sum3+max2;
      counter=counter+1;
    }
    if (max3<insideTest) {
      sum=sum+min3;
      sum2=sum2+std3;
      sum3=sum3+max3;
      counter=counter+1;
    }
    if (max4<insideTest) {
      sum=sum+min4;
      sum2=sum2+std4;
      sum3=sum3+max4;
      counter=counter+1;
    }
    // build "corner-means"
    meanMin=sum/counter;
    meanStd=sum2/counter;
    meanMax=sum3/counter;
    setResult("meanMin", row, meanMin);
    setResult("meanMax", row, meanMax);
    setResult("meanStd", row, meanStd);
    // if non of the corners qualifies for the background take the center
    // minimum as MIN
    if (counter==0) {
      MIN=minC;
    } else {
      MIN=meanMin;
    }
    //==========================================================================
    // define MAX
    if (maxC>5*meanMax) {
      MAX=maxC;
    } else {
      MAX=5*meanMax;
    }
    //==========================================================================
    // write MIN and MAX to "Results".
    setResult("MIN", row, MIN);
    setResult("MAX", row, MAX);
    //==========================================================================
    // save current slice to tmp
    sl=getTitle();
    saveAs("Tiff",dir+"$grammar{short_file}@"+sl+".tif");
    close();
    selectWindow(title);
    next=getSliceNumber+1;
    if (currentSlice<nSlices) {
      setSlice(next);
    }
  }
  updateResults();
  //===========================================================================
  // get the dimensions of the current image for the creation of a dummy
  // later on.
  selectWindow(title);
  getDimensions(width, height, channels, slices, rois);
  close();
  // Clear memory
  CLEAR_MEMORY();
  wait(1);
  //==========================================================================
  // upload the stack slide by slide, adjust contrast according to the MINs
  // and MAXs of five slices (average of the slices -2, -1, current slice,
  // +1, +2), combine them to a stack and save this as RGB-tif.
  // create new stack using blank dummy slice. 
  // the end.
  newImage(title, "8-bit Black", width, height, 1);
//  newImage(title+"_nobar", "8-bit Black", width, height, 1);
  for (frame=0; frame<slices; frame++) {
    open(dir+"$grammar{short_file}@"+(frame+1)+".tif");
    fulltitle="$grammar{short_file}@"+(frame+1)+".tif with bar ";
    NumOfSlices=10;
    if (frame < floor(NumOfSlices/2)) {
      lowerSlices=frame-1;
    } else if (frame >= floor(NumOfSlices/2)) {
      lowerSlices=floor(NumOfSlices/2);
    }
    if (frame < slices-floor(NumOfSlices/2)) {
      higherSlices=floor(NumOfSlices/2);
    } else {
      higherSlices=slices-frame;
    }
    RESET_VALUES();
    for (sln=frame-lowerSlices; sln<frame+higherSlices; sln++) {
      CHECK_FOR_NAN(sln);
    }
    // correction for empty frames
    if (maxCount == 0) {
        maxCount = 1;
    }
    if (maxSum == 0) {
        maxSum = 380;
    }
    MIN=floor(minSum/minCount);
    MAX=floor(maxSum/maxCount);
    
    //==========================================================================
    // apply MIN and MAx to the current slice.
    setMinAndMax(MIN, MAX);

    // Save a slice with no calibration bar
//    run("Duplicate","title=TMP");
//    run("8-bit");
//    run("Copy");
//    close();
//    selectWindow(title+"_nobar");
//    run("Paste");
//    run("Add Slice");
//    selectWindow("$grammar{short_file}@"+(frame+1)+".tif");

//!!!
	if (col == "red") {
		//makeRectangle(width-100, 0, 100,150);
		remove=newArray("(green)", "(blue)");
	} else if (col == "green") {
		//makeRectangle(width-100, height/2-75, 100,150);
		remove=newArray("(red)", "(blue)");
	} else if (col == "blue") {
		//makeRectangle(width-100, height-150, 100,150);
		remove=newArray("(green)", "(red)");
	}
	run("Calibration Bar...", "location=[At Selection] fill=None label=White number=5 decimal=0 font=12 zoom=1 bold");
	makeRectangle(0, 0, 0, 0);
        run("RGB Split");
	selectWindow(fulltitle+remove[0]);
	close();
	selectWindow(fulltitle+remove[1]);
	close();
    getStatistics(area, mean, min, max, std, histogram);
    //print("Frame " + frame + " maxSum " + maxSum + " maxCount " + maxCount + " min " + MIN + " max " + MAX + " postmean " + mean + " postmin " + min + " postmax " + max);
    setResult("postmean", frame, mean);
    setResult("postmin", frame, min);
    setResult("postmax", frame, max);
    run("Copy");
    close();
    File.delete(dir+"$grammar{short_file}@"+(frame+1)+".tif");
    selectWindow(title);
    run("Paste");
    run("Add Slice");
    call("java.lang.System.gc");
  }
  updateResults();
  setSlice(nSlices);
  run("Delete Slice");
  // setBatchMode(false);
}

function CHECK_FOR_NAN(row) {
  if (isNaN(getResult("MIN", row))) {
  }
  else {
    minCount=minCount+1;
    minSum=minSum+getResult("MIN", row);
  }
  if (isNaN(getResult("MAX", row))) {
  }
  else {
    maxCount=maxCount+1;
    maxSum=maxSum+getResult("MAX", row);
  }
}

function RESET_VALUES() {
  minCount=0;
  minSum=0;
  maxCount=0;
  maxSum=0;
}

function CREATE_PROJECTIONS() {
  print("Generating projections");
  // Reference+pattern total projection
  print("  Creating total projection (reference+pattern)");
  run("RGB Zprojector","red=[Maximum Intensity] green=[Maximum Intensity] "
      + "blue=[Maximum Intensity] power=2");
  saveAs("Jpeg","$grammar{projection_dir}/$grammar{short_file}" + "_total.jpg");
  close();
  print("  Total projection complete");

  // Reference+pattern substacks
  print("  Creating substack projections (reference+pattern)");
  subStack=15;
  orgNum=nSlices;
  slNum=nSlices;
  while (slNum>=subStack) {
    slNum=slNum-subStack;
  }
  addNum=subStack-slNum;
  if (slNum>0) {
    for (t=1; t<=addNum; t++)  {
      setSlice(nSlices);
      run("Add Slice");
      run("Subtract...", "slice value=255");
    }
  }
  run("Grouped ZProjector", "group="+subStack+" projection=[Max Intensity]");
  filepath = "$grammar{projection_dir}/$grammar{short_file}" + "_01.jpg";
  run("Image Sequence... ", "format=Jpeg name=[$grammar{short_file}"
      + "_] start=1 digits=2 save=[" + filepath + "]");
  close();
  print("  Substack projections complete");

  // Single channel projections
  print("  Splitting RGB");
  run("RGB Split");
  print("Split done: " + getTitle());
  //selectWindow("$grammar{tiff_file} (red)");
  //close();
  selectWindow("$grammar{tiff_file} (blue)");
  close();
  print("  Split complete");

  // Clear memory
  CLEAR_MEMORY();

  // Pattern total projection
  selectWindow("$grammar{tiff_file} (green)");
  print("  Creating total projection (pattern only)");
  run("RGB Merge...","red=*None* green=[$grammar{tiff_file} (green)] "
      + "blue=*None*");
  run("RGB Zprojector","red=[Maximum Intensity] green=[Maximum Intensity] "
      + "blue=[Maximum Intensity] power=2");
  saveAs("Jpeg", "$grammar{projection_dir}/$grammar{short_file}"
         + "_ch2_total.jpg");
  close();
  print("  Pattern projection complete");

  // Pattern substacks
  print("  Creating substack projections (pattern only)");
  run("Grouped ZProjector","group=" + subStack + " projection=[Max Intensity]");
  filepath = "$grammar{projection_dir}/$grammar{short_file}" + "_ch2_01.jpg";
  run("Image Sequence... ", "format=Jpeg name=[$grammar{short_file}"
      + "_ch2_] start=1 digits=2 save=[" + filepath + "]");
  close();
  print("  Substack projections complete");

  // Reference total projection
//  selectWindow("$grammar{tiff_file} (red)");
//  print("  Creating total projection (reference only)");
//  run("RGB Merge...","red=[$grammar{tiff_file} (red)] green=*None* "
//      + "blue=[$grammar{tiff_file} (red)]");
//  run("RGB Zprojector","red=[Maximum Intensity] green=[Maximum Intensity] "
//      + "blue=[Maximum Intensity] power=2");
//  saveAs("Jpeg", "$grammar{projection_dir}/$grammar{short_file}"
//         + "_ref_total.jpg");
//  close();
//  print("  Reference projection complete");

  // Reference substacks
//  print("  Creating substack projections (reference only)");
//  run("Grouped ZProjector","group=" + subStack + " projection=[Max Intensity]");
//  filepath = "$grammar{projection_dir}/$grammar{short_file}" + "_ref_01.jpg";
//  run("Image Sequence... ", "format=Jpeg name=[$grammar{short_file}"
//      + "_ref_] start=1 digits=2 save=[" + filepath + "]");
//  close();
//  print("  Substack projections complete");

  print("Projections generated");
}

function CREATE_TRANSLATION() {
  print("Generating translation");
  saveAs("avi","$grammar{translation_dir}/$grammar{translation_transient}");
  CLEAR_MEMORY();
  print("Translation generated");
}

function CREATE_ROTATION() {
  print("Generating rotation");
  run("3D Project...","projection=[Brightest Point] axis=Y-Axis slice=1 "
      + "initial=-90 total=180 rotation=5 lower=1 upper=255 opacity=0 "
      + "surface=100 interior=1 interpolate");
  saveAs("avi","$grammar{rotation_dir}/$grammar{rotation_transient}");
  close();
  CLEAR_MEMORY();
  print("Rotation generated");
}

function CLEAR_MEMORY() {
  d=call("ij.IJ.maxMemory");
  e=call("ij.IJ.currentMemory");
  for (trials=0; trials<3; trials++) {
    call("java.lang.System.gc");
    wait(100);
  }
}

function TERMINATE_MACRO() {
  while (nImages()>0) {
    selectImage(nImages());
    run("Close");
  }
  print("Sequence stop");
  run("Quit","");
  exit();
}
