#!/bin/bash
# ****************************************************************************
# Resource name:  simpson.bash_tmpl
# Written by:     Rob Svirskas
# Revision level: 1.0
# Date released:  2008-01-02
# Description:    After processing, this shell script template implements the
#                 image processing flow for images from the Simpson lab.
#                 ImageJ is used to create work products.
# Required resources:
#   Programs:     ImageJ
#                 clustermakemov
# Parameters:     $1: ImageJ macro path
# ****************************************************************************

# Required resources
BFCONVERT="/usr/local/java/jre/bin/java -mx1024m -cp /usr/local/ImageJ/plugins/loci_tools.jar loci.formats.tools.ImageConverter"
GMCONVERT='/misc/local/pipeline/bin/lsm2tiff';
GMTAG='/misc/local/pipeline/bin/tiff_tagger';
IMAGEJ="/usr/local/java/jre/bin/java -mx12000m -XX:+AggressiveHeap -jar /usr/local/ImageJ/ij.jar -ijpath /usr/local/ImageJ -batch "
MAKEMOVIE="/misc/local/pipeline/bin/createmp4"

# Parameters
if [ ! $1 ]
then
  echo "Error: no ImageJ macro specified"
  exit -1
fi
IMAGEJ_MACRO=$1
umask 002

# Make sure the .lsm file exists
if [ -e $grammar{lsm_dir}/$grammar{lsm_file} ]
then
  chmod 555 $grammar{lsm_dir}/$grammar{lsm_file}
else
  echo -e "Error: image $grammar{lsm_dir}/$grammar{lsm_file} does not exist"
  exit -1
fi

# Make sure the ImageJ macro exists
if [ ! -e $IMAGEJ_MACRO ]
then
  echo -e "Error: ImageJ macro $IMAGEJ_MACRO does not exist"
  exit -1
fi

# Add /usr/local/lib to library path for mplayer library
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

# Create work product directories as needed
echo "Creating work product directories"
for THISDIR in $grammar{secdata_dirs}
do
  if [ ! -e $THISDIR ]
  then
    mkdir -p -m 755 $THISDIR
    if [ ! -e $THISDIR ]
    then
      echo -e "Could not create $THISDIR"
      exit -1
    fi
  fi
done

# Set up X frame  buffer
#/usr/bin/Xvfb :99 -screen 0 1x1x24 -sp /usr/lib64/xserver/SecurityPolicy -fp /usr/share/X11/fonts/misc &
#MYPID=$!
#export DISPLAY="localhost:99.0"

echo "Running on "`hostname`
# Run the ImageJ macro
xvfb-run -a -n 6000 $IMAGEJ $IMAGEJ_MACRO
if [ $? -ne 0 ]
then
  echo -e "Error: ImageJ macro $IMAGEJ_MACRO failed"
  exit -1
fi

# We're done with the frame buffer
#kill -9 $MYPID

# Convert translation .avi to .mp4
echo "Converting translation $grammar{translation_transient}"
if [ -e $grammar{translation_dir}/$grammar{translation_transient} ]
then
  $MAKEMOVIE $grammar{translation_dir}/$grammar{translation_transient} $grammar{translation_dir}/$grammar{translation_file}
  STATUS=$?
else
  echo "Error: no translation at $grammar{translation_dir}/$grammar{translation_transient}"
  exit -1
fi
if [ $STATUS == 0 ]
then
  rm $grammar{translation_dir}/$grammar{translation_transient}
  chmod 755 $grammar{translation_dir}/$grammar{translation_file}
else
  echo "Error $STATUS: no translation at $grammar{translation_dir}/$grammar{translation_file}"
  exit -1
fi

# Convert rotation .avi to .mp4
#echo "Converting rotation $grammar{rotation_transient}"
#if [ -e $grammar{rotation_dir}/$grammar{rotation_transient} ]
#then
#  $MAKEMOVIE $grammar{rotation_dir}/$grammar{rotation_transient} $grammar{rotation_dir}/$grammar{rotation_file}
#  STATUS=$?
#else
#  echo "Error: no rotation at $grammar{rotation_dir}/$grammar{rotation_transient}"
#  exit -1
#fi
#if [ $STATUS == 0 ]
#then
#  rm $grammar{rotation_dir}/$grammar{rotation_transient}
#  chmod 755 $grammar{rotation_dir}/$grammar{rotation_file}
#else
#  echo "Error $STATUS: no rotation at $grammar{rotation_dir}/$grammar{rotation_file}"
#  exit -1
#fi

# Convert medial translation .avi to .mp4
if [ $grammar{medial} == 1 ]
then
  echo "Converting medial translation $grammar{medial_transient}"
  if [ -e $grammar{medial_dir}/$grammar{medial_transient} ]
  then
    $MAKEMOVIE $grammar{medial_dir}/$grammar{medial_transient} $grammar{medial_dir}/$grammar{medial_file}
    STATUS=$?
  else
    echo "Error: no medial translation at $grammar{medial_dir}/$grammar{medial_transient}"
    exit -1
  fi
  if [ $STATUS == 0 ]
  then
    rm $grammar{medial_dir}/$grammar{medial_transient}
    chmod 755 $grammar{medial_dir}/$grammar{medial_file}
  else
    echo "Error $STATUS: no medial translation at $grammar{medial_dir}/$grammar{medial_file}"
    exit -1
  fi
fi

# Create OME-TIFF file
#echo "Creating OME-TIFF file $grammar{ome_file}"
#$BFCONVERT -debug $grammar{lsm_dir}/$grammar{lsm_file} $grammar{tiff_dir}/$grammar{ome_file}
#if [ -e $grammar{tiff_dir}/$grammar{ome_file} ]
#then
#  echo "OME-TIFF created";
#else
#  echo "Error: no OME-TIFF at $grammar{tiff_dir}/$grammar{ome_file}"
#  exit -1
#fi

# Create EWM file and link
#echo "Creating EWM-TIFF file $grammar{ewm_file}"
#$GMCONVERT $grammar{lsm_dir}/$grammar{lsm_file} $grammar{tiff_dir}/$grammar{ewm_file}
#if [ -e $grammar{tiff_dir}/$grammar{ewm_file} ]
#then
#  $GMTAG -f $grammar{tiff_dir}/$grammar{ewm_file}
#  echo "EWM-TIFF created"
#else
#  echo "Error: no EWM-TIFF at $grammar{tiff_dir}/$grammar{ewm_file}"
#  exit -1
#fi

# We're done! Delete the ImageJ macro and this shell script.
rm -f $IMAGEJ_MACRO
trap "rm -f $0" 0
echo "Job complete for $grammar{short_file}"
